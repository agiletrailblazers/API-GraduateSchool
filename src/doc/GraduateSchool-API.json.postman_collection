{
	"id": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
	"name": "GraduateSchool-API",
	"description": "",
	"order": [
		"0b5d57eb-0c1a-675c-94dc-3af70916fbad",
		"a1ff5901-b0ff-e00e-4ab5-d56ac4195374",
		"0cc16802-405e-7901-5623-b65467ca06f5",
		"a6fa33e7-a532-b5c3-993c-71c90486b4e2",
		"2c6cae2b-a4b2-a066-fd23-832a1db005b6",
		"17d43702-356a-feae-1175-c4572c2f0c36",
		"fab6b66c-2f61-13de-4a6d-ce4dc78f1233",
		"b75ea52b-ecec-82d8-89fe-e32351000c7d",
		"9b186bae-036f-f152-1e2d-87ba363907d5",
		"88bf30f5-2ce5-f5de-65bd-a8da45a95312",
		"6fecda6d-c7a0-c2d7-b94d-e2b0ba9a8889",
		"c9cb4e2f-a9b6-c5b6-e6e4-c45cc70d4b9b",
		"bff74b5d-04c6-45d0-e0b0-bed434e86030",
		"b4e28a33-85ad-e45b-25e0-c513ea95c03d",
		"824fbe55-2a5f-632f-83da-5ef5ef8c5047",
		"295231e2-467a-b225-bd49-7c60e5535de1",
		"54348be8-a4da-9829-c4f8-9c6cf498d458",
		"1d902110-9d02-0bf4-060a-5796a81d428e",
		"9b446187-fcb9-4852-c4c3-f1afe9533627",
		"0f5cc4e4-f631-6538-11cb-4313090f10e6",
		"8e559527-e7ea-cb94-3165-0f681c4794bf",
		"718be621-076a-6adc-1492-e022a044b2e1",
		"155db0c3-4baa-2fad-df27-99df55368b89",
		"aa7124b5-72aa-cb25-8771-50719bd12fef",
		"50a2f8c1-bf1c-0a77-3db6-4b151200d0a8"
	],
	"folders": [
		{
			"id": "911aaf97-e4cd-8e64-c5ea-2db82b8390de",
			"name": "Authentication",
			"description": "",
			"order": [
				"8ec567dc-efcf-c184-80b1-e74b07a18cd0",
				"6e46aac7-e9d8-b9cb-978f-6c8fe9242355",
				"fad1f0cf-57f2-383c-a9fa-74e4c0bb1282",
				"fd62be18-8405-4c72-294e-288cbf85b44d",
				"6379fabb-f9b7-9b9c-c9bb-fb29591d7d8f",
				"f79c0dfc-2e67-1e1b-5e5e-48ac5bde4162",
				"832e0c3a-4103-c4a7-3ba4-ae92ff24a97e",
				"b0e6fdae-c56e-2f0e-4255-cb784fcf1cec",
				"bbc604ae-ca6d-ca1f-8b02-7e7707608e0b",
				"1bc5e67a-6c0f-c7da-9966-04cfd526fba6",
				"74d5b6c3-f9ee-aa8b-8e7c-50338f1d8286",
				"2ef3ad50-654a-f17a-3a49-43cd401f19f9",
				"2a690534-8003-d4b8-da47-6f07db0f58fd",
				"865a886f-1ea8-41b9-dbed-5fea6f0d5ff9",
				"acaab6c4-4fb8-c358-15be-81626a17037a",
				"e0f33e52-711f-2677-3041-8c833f90d688",
				"25f6b63f-9383-666d-f96b-8a274b60c942",
				"2bd9562a-8e1c-cfbc-d1e0-a7660b91cc5c",
				"9d235071-a1c9-907f-fd14-5e58df70bc14",
				"86102e9e-60c6-c5e7-4de1-3320cd2d8566"
			],
			"owner": "329957",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554"
		}
	],
	"timestamp": 1436731751085,
	"owner": "329957",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"folder": null,
			"id": "0b5d57eb-0c1a-675c-94dc-3af70916fbad",
			"name": "Ping",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "A ping test API",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/ping",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5"
		},
		{
			"id": "0cc16802-405e-7901-5623-b65467ca06f5",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680434436,
			"name": "Get Token",
			"description": "Get auth token",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "0f5cc4e4-f631-6538-11cb-4313090f10e6",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=&filter=content:Washington,%20DC",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831901017,
			"name": "Site - Search - By location",
			"description": "Search the site by a keyword and filter by location",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "155db0c3-4baa-2fad-df27-99df55368b89",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/55555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No session found for session id 55555\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680503443,
			"name": "Specific Course Session Error",
			"description": "See what a course session error looks like",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "17d43702-356a-feae-1175-c4572c2f0c36",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?page=0",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455832339101,
			"name": "Courses - Invalid Args",
			"description": "Invalid args passed to course API",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "1bc5e67a-6c0f-c7da-9966-04cfd526fba6",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/registrations/users/{{authentication.user_id}}/sessions/555555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680410787,
			"name": "Get Registrations for User by Session",
			"description": "Verify that no registrations for the user",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "1d902110-9d02-0bf4-060a-5796a81d428e",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/locations",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\ntests[\"Contains Washington\"] = responseBody.has(\"Washington\");\ntests[\"Contains DC\"] = responseBody.has(\"DC\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831865224,
			"name": "Locations",
			"description": "Get Locations",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "25f6b63f-9383-666d-f96b-8a274b60c942",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.duplicate.user_id\");\ntests[\"Verify renewal token created\"] = data.renewalToken.token;\n\npostman.setGlobalVariable(\"authentication.duplicate.authenticated_token\", data.authToken.token);\npostman.setGlobalVariable(\"authentication.duplicate.renewal_token\", data.renewalToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888731059,
			"name": "Postman User Authentication Should Succeed Duplicate User",
			"description": "Verify that the postman user can login",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postmanDuplicate@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "295231e2-467a-b225-bd49-7c60e5535de1",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831837648,
			"name": "Course Sessions",
			"description": "Get Course Sessions",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "2a690534-8003-d4b8-da47-6f07db0f58fd",
			"headers": "Authorization: {{authentication.duplicateUser.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.duplicate.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888191608,
			"name": "Create Postman User For Duplicate Email",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postmanDuplicate@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postmanDuplicate@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "2bd9562a-8e1c-cfbc-d1e0-a7660b91cc5c",
			"headers": "Authorization: {{authentication.duplicate.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.duplicate.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888727430,
			"name": "Delete Postman User Duplicate",
			"description": "Delete the postman user",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "2c6cae2b-a4b2-a066-fd23-832a1db005b6",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=introduction%20to%20accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\n\nvar courses = JSON.parse(responseBody).courses;\n\nfor (var i=0; i<courses.length; i++){\n    if(courses[i].title.toLowerCase().indexOf(\"introduction\") > -1 || courses[i].title.toLowerCase().indexOf(\"to\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"introduction\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"to\") > -1){\n        tests[\"Course is relevant to accounting test \" + i] = (courses[i].title.toLowerCase().indexOf(\"accounting\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"accounting\") > -1)\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465498919726,
			"name": "Courses - Search Connector Words",
			"description": "Search for a course by a description or course code and removing connector words",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "2ef3ad50-654a-f17a-3a49-43cd401f19f9",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.duplicateUser.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888144260,
			"name": "Get Guest Token for Duplicate User",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "50a2f8c1-bf1c-0a77-3db6-4b151200d0a8",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions?status=c&sessiondomain=CD",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All -Filter by Session Status and SessionDomain ",
			"description": "Sessions - All -Filter by Session Status and SessionDomain",
			"descriptionFormat": "html",
			"time": 1459347178806,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "54348be8-a4da-9829-c4f8-9c6cf498d458",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD12345/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No sessions found for course courseId BAD12345\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831846943,
			"name": "Course Sessions Error",
			"description": "See what a course session error looks like",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "6379fabb-f9b7-9b9c-c9bb-fb29591d7d8f",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Username is a required field\"] = validationErrorsMap.get(\"username\") === \"Required field\";\ntests[\"Password is a required field\"] = validationErrorsMap.get(\"password\") === \"Required field\";\ntests[\"Last Four SSN is a required field\"] = validationErrorsMap.get(\"lastFourSSN\") === \"Required field\";\ntests[\"Timezone ID is a required field\"] = validationErrorsMap.get(\"timezoneId\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076991783,
			"name": "Create Postman User for Input Validation",
			"description": "Create the postman user with invalid user information for validation testing",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "6e46aac7-e9d8-b9cb-978f-6c8fe9242355",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Invalid user message\"] = jsonData.message === \"Invalid user\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456589788349,
			"name": "Postman User Authentication Should Fail",
			"description": "Verify that the postman user cannot login since the user does not exist at this point.",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de",
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}"
		},
		{
			"id": "6fecda6d-c7a0-c2d7-b94d-e2b0ba9a8889",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}category_subject:Accounting~Accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\nvar data = JSON.parse(responseBody);\ntests[\"Results Found\"] = data.numFound != 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831767286,
			"name": "Courses- Search -Filter by Category Subject",
			"description": "A Course Search by Category Subject",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "718be621-076a-6adc-1492-e022a044b2e1",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/610076",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"610076\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680498475,
			"name": "Specific Course Session",
			"description": "Get Course Session",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "74d5b6c3-f9ee-aa8b-8e7c-50338f1d8286",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464717971624,
			"name": "Update Postman User",
			"description": "",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"differentPostman@atb.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"differentPostman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "824fbe55-2a5f-632f-83da-5ef5ef8c5047",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD1234",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No course found for course courseId BAD1234\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831824857,
			"name": "Course Detail Error",
			"description": "No course found for Course Code",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "832e0c3a-4103-c4a7-3ba4-ae92ff24a97e",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.user_id\");\ntests[\"Verify renewal token created\"] = data.renewalToken.token;\n\npostman.setGlobalVariable(\"authentication.authenticated_token\", data.authToken.token);\npostman.setGlobalVariable(\"authentication.renewal_token\", data.renewalToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461181834225,
			"name": "Postman User Authentication Should Succeed",
			"description": "Verify that the postman user can login",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "86102e9e-60c6-c5e7-4de1-3320cd2d8566",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify unauthorized\"] = responseCode.code === 401;\n\npostman.clearGlobalVariable(\"authentication.user_id\");\npostman.clearGlobalVariable(\"authentication.guest_token\");\npostman.clearGlobalVariable(\"authentication.authenticated_token\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456591230081,
			"name": "Postman User Authentication Should Fail Again",
			"description": "Verify that the postman user can no longer login",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "865a886f-1ea8-41b9-dbed-5fea6f0d5ff9",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888807937,
			"name": "Update Postman User Duplicate Email",
			"description": "",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"postmanDuplicate@atb.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"postmanDuplicate@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "88bf30f5-2ce5-f5de-65bd-a8da45a95312",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=&filter={facet-countall}category:Human Resources",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831751703,
			"name": "Courses- Search -Filter by Category",
			"description": "A Course Search by Category",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "8e559527-e7ea-cb94-3165-0f681c4794bf",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/categories",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar data = JSON.parse(responseBody);\ntests[\"An array is returned\"] = data.length > 0;\ntests[\"First item has a category\"] = data[0].category.length > 0;\ntests[\"First item has a subject array\"] = data[0].courseSubject.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831913078,
			"name": "Categories",
			"description": "Get course categories with a list o subjects in each category",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "8ec567dc-efcf-c184-80b1-e74b07a18cd0",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680355115,
			"name": "Get Guest Token",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "9b186bae-036f-f152-1e2d-87ba363907d5",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&filter=city_state:Jacksonville, FL",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831742056,
			"name": "Courses - Search - Filter by Location",
			"description": "Search for a course by a description or course code and filter by location",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "9b446187-fcb9-4852-c4c3-f1afe9533627",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831887742,
			"name": "Site - Search",
			"description": "Search the site by a keyword",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "9d235071-a1c9-907f-fd14-5e58df70bc14",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify user not found\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct message\"] = data.message === (\"User not found by id \" + postman.getGlobalVariable(\"authentication.user_id\"));\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680425091,
			"name": "Get Postman User by ID Should Not Be Found",
			"description": "Verify that the postman user has been deleted",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"folder": null,
			"id": "a1ff5901-b0ff-e00e-4ab5-d56ac4195374",
			"name": "Environment Check",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "An API to find out which environment you are running",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/env",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5"
		},
		{
			"id": "a6fa33e7-a532-b5c3-993c-71c90486b4e2",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455830778929,
			"name": "Courses - Search",
			"description": "Search for a course by a description or course code",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "aa7124b5-72aa-cb25-8771-50719bd12fef",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All",
			"description": "",
			"descriptionFormat": "html",
			"time": 1458852618739,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "acaab6c4-4fb8-c358-15be-81626a17037a",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/reauthentication",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful reAuthentication\"] = responseCode.code === 200;\n\ntests[\"Verify body is empty\"] = responseBody === \"\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461243626817,
			"name": "Postman User ReAuthorize Token AuthToken Still Valid",
			"description": "",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"authToken\" : {\n        \"token\" : \"{{authentication.authenticated_token}}\"\n    },\n    \"renewalToken\" : {\n        \"token\" : \"{{authentication.renewal_token}}\"\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "b0e6fdae-c56e-2f0e-4255-cb784fcf1cec",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463077009495,
			"name": "Create Postman User throws Duplicate User Exception",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "b4e28a33-85ad-e45b-25e0-c513ea95c03d",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check id\"] = data.id === \"ADMB7006D001\";\ntests[\"Check code\"] = data.code === \"ADMB7006D\";\ntests[\"Objective exists\"] = data.objective.length > 0;\ntests[\"Outcomes exists\"] = data.outcomes.length > 0;\ntests[\"Description exists\"] = data.description.formatted.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831808191,
			"name": "Course Detail",
			"description": "Get course detail",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "b75ea52b-ecec-82d8-89fe-e32351000c7d",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=&filter=status:C",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response contains status facets\"] = responseBody.has(\"statusFacets\");\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for status facet of 'C'\"] = data.statusFacets.C >= 0\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831731667,
			"name": "Courses - Search - Filter by Status",
			"description": "Search for a course by a description or course code and filter by status",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "bbc604ae-ca6d-ca1f-8b02-7e7707608e0b",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.id === postman.getGlobalVariable(\"authentication.user_id\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680401363,
			"name": "Get Postman User by ID",
			"description": "Get the postman user by the user id",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "bff74b5d-04c6-45d0-e0b0-bed434e86030",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}delivery_method:Classroom - Day",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831783787,
			"name": "Courses- Search -Filter by Delivery Method",
			"description": "Courses - Search -Filter by DeliveryMethod",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5"
		},
		{
			"id": "c9cb4e2f-a9b6-c5b6-e6e4-c45cc70d4b9b",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831799000,
			"name": "Courses - All",
			"description": "Get all courses",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "e0f33e52-711f-2677-3041-8c833f90d688",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680419440,
			"name": "Delete Postman User",
			"description": "Delete the postman user",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "f79c0dfc-2e67-1e1b-5e5e-48ac5bde4162",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076980780,
			"name": "Create Postman User",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "fab6b66c-2f61-13de-4a6d-ce4dc78f1233",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&page=2&numRequested=10",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 2\"] = data.currentPage === 2;\ntests[\"Num requested is 10\"] = data.numRequested === 10;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831595202,
			"name": "Courses - Search - Pagination",
			"description": "Search for a course by a description or course code with page and nuumber requested specified",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": []
		},
		{
			"id": "fad1f0cf-57f2-383c-a9fa-74e4c0bb1282",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Address1 is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.address1\") === \"Required field\";\ntests[\"City is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.city\") === \"Required field\";\ntests[\"State is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.state\") === \"Required field\";\ntests[\"Postal Code is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.postalCode\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076940955,
			"name": "Create Postman User for Input Validation of Address",
			"description": "Create the postman user with invalid user information in Address Object for validation testing",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		},
		{
			"id": "fd62be18-8405-4c72-294e-288cbf85b44d",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 5 validation errors\"] = data.validationErrors.length == 5;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"First Name is a required field\"] = validationErrorsMap.get(\"person.firstName\") === \"Required field\";\ntests[\"Last Name is a required field\"] = validationErrorsMap.get(\"person.lastName\") === \"Required field\";\ntests[\"Email Address is a required field\"] = validationErrorsMap.get(\"person.emailAddress\") === \"Required field\";\ntests[\"Primary Phone is a required field\"] = validationErrorsMap.get(\"person.primaryPhone\") === \"Required field\";\ntests[\"Date of Birth is a required field\"] = validationErrorsMap.get(\"person.dateOfBirth\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680373528,
			"name": "Create Postman User for Input Validation of Person",
			"description": "Create the postman user with invalid user information in Person Object for validation testing",
			"collectionId": "b30f4fa2-b4df-c7ba-dfae-e7b691bd8cf5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "911aaf97-e4cd-8e64-c5ea-2db82b8390de"
		}
	]
}