{
	"id": "f03fbab9-1396-a1d3-400d-401bff395220",
	"name": "GraduateSchool-API",
	"description": "",
	"order": [
		"dad02740-99b3-07b6-3e7d-09d588b7cb56",
		"24685621-1232-952e-b2c5-d7b0fece0bda",
		"21cb0e48-dc3c-0db5-9e5d-7dbb53eb7391",
		"43f4fa0e-58b5-e091-3cb5-d18eefb74448",
		"a9ea12c8-f0af-4a5c-5dbf-9687b1cc5711",
		"f121e769-6774-6b82-da52-58cfff02374a",
		"56887649-e12c-e972-b8ee-ca7d62969829",
		"573c1cff-4792-b4b6-7de4-a1af75d4c593",
		"0291e069-23d2-0df9-20d9-7716387d9479",
		"aa8f986b-eee6-b4c2-f915-f6c0cb062476",
		"bf8b8361-2e60-5165-a428-8f9456c1346e",
		"7bb209fa-c774-6e96-bf53-0616d617498e",
		"69d085c6-bc30-216d-5e9c-583adef356af",
		"98b26b7e-ce26-15e6-858b-69c0153deb4e",
		"40380004-2b63-b68b-7da9-66d6d686edde",
		"e5a8d332-aaaa-0b26-5d48-c8015017eae8",
		"ee4ef2c0-100f-433b-09c5-23253a963a1f",
		"48e37653-9db7-ef2f-cb95-79d342accf6c",
		"ae264781-2f57-350e-ad0a-24e461932950",
		"b3225308-0eb8-b9e8-55bc-71edd96c13bf",
		"656408c3-31af-359b-7845-9a65167cbbc2",
		"f3006c5b-b3f4-28a7-5344-6a67f92aa951",
		"75b825b0-7203-d9a8-958d-0c770e478ff0",
		"12a3a92c-be08-05fa-21b4-b4fdfbfb19a4",
		"2b5a6b41-e7db-9f9b-3663-9c73ba60804a",
		"83702a1d-2a9f-d5e8-6569-83f75a0803be"
	],
	"folders": [
		{
			"id": "17ee8b3c-425d-1844-177a-7919e5338f3a",
			"name": "Authentication",
			"description": "",
			"order": [
				"268fb57a-6107-ccef-8363-beeb6f1f6dd8",
				"887b6a3b-ece6-cc0d-7cc2-df7fe4e4ef74",
				"f9c67a56-59ab-6b22-6d47-7bfb05eaa8a8",
				"4cf7adf6-18e0-201c-7ae0-1515eed49ce4",
				"7d0d712f-9e99-1ae1-3e50-adc599ca809a",
				"6162c254-92e2-1e92-3725-d84f9b1dcff8",
				"59e00d3b-ea14-103b-5bc0-f0f72d5fbb1d",
				"b2bda512-0ae8-4d1a-402c-b01ef28b6a2d",
				"a8691425-f43b-18e4-4d29-6477ca5c372b",
				"755b8fd6-723d-ebc8-1f5d-28d48bb9aab9",
				"44506200-2ecb-b830-517f-f13eb30f4cd0",
				"90b1be02-58aa-c952-05a0-6223be960373",
				"37948ff3-5bb4-c6f2-c136-ffef87d9fba7",
				"bb38cd6d-4657-3be6-b42e-103e20369fac",
				"babfb122-9bfc-1f03-5034-b6e0ea50c0af",
				"12463dbd-3a3d-c532-7781-d5ae85a47f41",
				"a62e2880-94b8-4234-d342-e4925cdac08e",
				"1f34b70f-cb07-595e-523f-a9a8ecd0d00c",
				"f1882148-3f63-57b2-6bec-ff881a20400d",
				"21d9e231-a05d-9430-f8be-fe68051eace2"
			],
			"owner": "329957",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554"
		},
		{
			"id": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94",
			"name": "Courses Search Synonym Tests",
			"description": "",
			"order": [
				"4ff7fcba-89eb-ca81-6f5f-0c88b114920a",
				"089045d1-2829-8ad3-63b6-c26540d40893",
				"b77a4521-eca8-b334-7973-d2b7b60b74b2",
				"8f128907-f25e-fe16-7421-321562f9aac5",
				"ad035177-babb-74c3-b129-75bd75f340ce",
				"8978ec62-83ed-bede-dbaf-73b42bc89fc5",
				"1ac6b6b3-7a47-26c5-a84a-96761900e765",
				"03acc712-76be-3068-5d5b-0c6bb1a99008",
				"30102416-92ad-5e43-fb24-db666eeb2756",
				"acc40025-5d6e-394e-0d38-0dd4ecbbde27",
				"f1e306f8-111c-03f3-291f-2668fc005290",
				"1684f448-ad21-ad62-7bbd-08e9ac293211"
			],
			"owner": "329957",
			"collectionId": "150f6825-e3b1-58b4-93fc-96afc1e8eb24"
		},
		{
			"id": "e42ed8df-6898-bcfa-ac32-dd796f5d84e4",
			"name": "Site Search Synonym Tests",
			"description": "",
			"order": [
				"60f1c108-3c1b-6ab5-684f-894d29c8c9b6",
				"5fe23c3a-d74d-a1a7-5afd-732f713aa29c",
				"58abe940-d1e4-c823-cac8-08ffcf5c4401"
			],
			"owner": "329957",
			"collectionId": "150f6825-e3b1-58b4-93fc-96afc1e8eb24"
		}
	],
	"timestamp": 1436731751085,
	"owner": "329957",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "0291e069-23d2-0df9-20d9-7716387d9479",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&filter=city_state:Jacksonville, FL",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831742056,
			"name": "Courses - Search - Filter by Location",
			"description": "Search for a course by a description or course code and filter by location",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "03acc712-76be-3068-5d5b-0c6bb1a99008",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=reduction%20in%20force&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)reduction in force($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)rif($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)reduction in force($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)rif($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"reduction\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"force\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"rif\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"reduction\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"force\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"rif\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_rif\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909147593,
			"name": "Courses- Search - Check response synonym (Reduction in Force)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "089045d1-2829-8ad3-63b6-c26540d40893",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=human%20resources&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)human resources($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)hr($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)human resources($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)hr($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"human\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"resources\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"hr\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"human\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"resources\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"hr\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_hr\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909103156,
			"name": "Courses- Search - Check response synonym (human resources)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "12463dbd-3a3d-c532-7781-d5ae85a47f41",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680419440,
			"name": "Delete Postman User",
			"description": "Delete the postman user",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "12a3a92c-be08-05fa-21b4-b4fdfbfb19a4",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/55555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No session found for session id 55555\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680503443,
			"name": "Specific Course Session Error",
			"description": "See what a course session error looks like",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "1684f448-ad21-ad62-7bbd-08e9ac293211",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=cors&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/)!== null ||  data.courses[i].title.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"contracting\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"officer\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"representatives\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cor\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cors\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"contracting\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"officer\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"representatives\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cor\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cros\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\ntests[\"Number of exact matches is correct 1\"] = globals[\"num_exact_results_cor1\"] == numExactMatches;\ntests[\"Number of exact matches is correct 2\"] = globals[\"num_exact_results_cor2\"] == numExactMatches;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909161860,
			"name": "Courses- Search - Check response synonym (cors)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "1ac6b6b3-7a47-26c5-a84a-96761900e765",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=far&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)federal acquisition regulation($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)far($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)federal acquisition regulation($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)far($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"federal\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"acquisition\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"regulation\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"far\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"federal\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"acquisition\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"regulation\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"far\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\ntests[\"Number of exact matches is correct\"] = globals[\"num_exact_results_far\"] == numExactMatches;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909144516,
			"name": "Courses- Search - Check response synonym (FAR)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "1f34b70f-cb07-595e-523f-a9a8ecd0d00c",
			"headers": "Authorization: {{authentication.duplicate.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.duplicate.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888727430,
			"name": "Delete Postman User Duplicate",
			"description": "Delete the postman user",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "21cb0e48-dc3c-0db5-9e5d-7dbb53eb7391",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680434436,
			"name": "Get Token",
			"description": "Get auth token",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "21d9e231-a05d-9430-f8be-fe68051eace2",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify unauthorized\"] = responseCode.code === 401;\n\npostman.clearGlobalVariable(\"authentication.user_id\");\npostman.clearGlobalVariable(\"authentication.guest_token\");\npostman.clearGlobalVariable(\"authentication.authenticated_token\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456591230081,
			"name": "Postman User Authentication Should Fail Again",
			"description": "Verify that the postman user can no longer login",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"folder": null,
			"id": "24685621-1232-952e-b2c5-d7b0fece0bda",
			"name": "Environment Check",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "An API to find out which environment you are running",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/env",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220"
		},
		{
			"id": "268fb57a-6107-ccef-8363-beeb6f1f6dd8",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680355115,
			"name": "Get Guest Token",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "2b5a6b41-e7db-9f9b-3663-9c73ba60804a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All",
			"description": "",
			"descriptionFormat": "html",
			"time": 1458852618739,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "30102416-92ad-5e43-fb24-db666eeb2756",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=rif&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)reduction in force($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)rif($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)reduction in force($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)rif($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"reduction\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"force\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"rif\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"reduction\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"force\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"rif\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\ntests[\"Number of exact matches is correct\"] = globals[\"num_exact_results_rif\"] == numExactMatches;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909151178,
			"name": "Courses- Search - Check response synonym (rif)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "37948ff3-5bb4-c6f2-c136-ffef87d9fba7",
			"headers": "Authorization: {{authentication.duplicateUser.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.duplicate.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888191608,
			"name": "Create Postman User For Duplicate Email",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postmanDuplicate@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postmanDuplicate@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "40380004-2b63-b68b-7da9-66d6d686edde",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check id\"] = data.id === \"ADMB7006D001\";\ntests[\"Check code\"] = data.code === \"ADMB7006D\";\ntests[\"Objective exists\"] = data.objective.length > 0;\ntests[\"Outcomes exists\"] = data.outcomes.length > 0;\ntests[\"Description exists\"] = data.description.formatted.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831808191,
			"name": "Course Detail",
			"description": "Get course detail",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "43f4fa0e-58b5-e091-3cb5-d18eefb74448",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455830778929,
			"name": "Courses - Search",
			"description": "Search for a course by a description or course code",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "44506200-2ecb-b830-517f-f13eb30f4cd0",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464717971624,
			"name": "Update Postman User",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"differentPostman@atb.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"differentPostman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "48e37653-9db7-ef2f-cb95-79d342accf6c",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD12345/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No sessions found for course courseId BAD12345\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831846943,
			"name": "Course Sessions Error",
			"description": "See what a course session error looks like",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "4cf7adf6-18e0-201c-7ae0-1515eed49ce4",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 5 validation errors\"] = data.validationErrors.length == 5;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"First Name is a required field\"] = validationErrorsMap.get(\"person.firstName\") === \"Required field\";\ntests[\"Last Name is a required field\"] = validationErrorsMap.get(\"person.lastName\") === \"Required field\";\ntests[\"Email Address is a required field\"] = validationErrorsMap.get(\"person.emailAddress\") === \"Required field\";\ntests[\"Primary Phone is a required field\"] = validationErrorsMap.get(\"person.primaryPhone\") === \"Required field\";\ntests[\"Date of Birth is a required field\"] = validationErrorsMap.get(\"person.dateOfBirth\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680373528,
			"name": "Create Postman User for Input Validation of Person",
			"description": "Create the postman user with invalid user information in Person Object for validation testing",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "4ff7fcba-89eb-ca81-6f5f-0c88b114920a",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"syn_auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909129281,
			"name": "Get Token Synonym",
			"description": "Get auth token",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "56887649-e12c-e972-b8ee-ca7d62969829",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&page=2&numRequested=10",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 2\"] = data.currentPage === 2;\ntests[\"Num requested is 10\"] = data.numRequested === 10;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831595202,
			"name": "Courses - Search - Pagination",
			"description": "Search for a course by a description or course code with page and nuumber requested specified",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "573c1cff-4792-b4b6-7de4-a1af75d4c593",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=&filter=status:C",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response contains status facets\"] = responseBody.has(\"statusFacets\");\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for status facet of 'C'\"] = data.statusFacets.C >= 0\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831731667,
			"name": "Courses - Search - Filter by Status",
			"description": "Search for a course by a description or course code and filter by status",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "58abe940-d1e4-c823-cac8-08ffcf5c4401",
			"headers": "Authorization: {{site_search_syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/site?search=GATI",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nvar inTopTen = false;\n\nfor (var i=0; i<10; i++){\n    if (data.pages[i].title == \"Auditing (Government Audit Training Institute)\"){\n        inTopTen = true;\n        break;\n    }\n}\n\ntests[\"GATI is in top 10 results\"] = inTopTen;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466779036594,
			"name": "Site Search - Check response synonym (gati)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "59e00d3b-ea14-103b-5bc0-f0f72d5fbb1d",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.user_id\");\ntests[\"Verify renewal token created\"] = data.renewalToken.token;\n\npostman.setGlobalVariable(\"authentication.authenticated_token\", data.authToken.token);\npostman.setGlobalVariable(\"authentication.renewal_token\", data.renewalToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461181834225,
			"name": "Postman User Authentication Should Succeed",
			"description": "Verify that the postman user can login",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "5fe23c3a-d74d-a1a7-5afd-732f713aa29c",
			"headers": "Authorization: {{site_search_syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/site?search=Government%20Audit%20Training%20Institute",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nvar inTopTen = false;\n\nfor (var i=0; i<10; i++){\n    if (data.pages[i].title == \"Auditing (Government Audit Training Institute)\"){\n        inTopTen = true;\n        break;\n    }\n}\n\ntests[\"GATI is in top 10 results\"] = inTopTen;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466778874634,
			"name": "Site Search - Check response synonym (Government Audit Training Institute)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "60f1c108-3c1b-6ab5-684f-894d29c8c9b6",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"site_search_syn_auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466617570153,
			"name": "Get Token Synonym",
			"description": "Get auth token",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "e42ed8df-6898-bcfa-ac32-dd796f5d84e4"
		},
		{
			"id": "6162c254-92e2-1e92-3725-d84f9b1dcff8",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076980780,
			"name": "Create Postman User",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "656408c3-31af-359b-7845-9a65167cbbc2",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=&filter=content:Washington,%20DC",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831901017,
			"name": "Site - Search - By location",
			"description": "Search the site by a keyword and filter by location",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "69d085c6-bc30-216d-5e9c-583adef356af",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831799000,
			"name": "Courses - All",
			"description": "Get all courses",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "755b8fd6-723d-ebc8-1f5d-28d48bb9aab9",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/registrations/users/{{authentication.user_id}}/sessions/555555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680410787,
			"name": "Get Registrations for User by Session",
			"description": "Verify that no registrations for the user",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "75b825b0-7203-d9a8-958d-0c770e478ff0",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/610076",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"610076\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680498475,
			"name": "Specific Course Session",
			"description": "Get Course Session",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "7bb209fa-c774-6e96-bf53-0616d617498e",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=defense&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\nvar res = [];\nvar i = 0;\nfor ( i=0; i <data.courses.length; ++i) {\n    res[i] = 10;\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)defense($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)dod($|\\s|,)/)!== null) {\n        res[i] = 0;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)defense($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)dod($|\\s|,)/) !== null) {\n        res[i] = 1;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"defense\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"dod\")!== -1) {\n      res[i] = 2;\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"defense\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"dod\")!== null) {\n        res[i] = 3;\n    }\n}\n\nfor (i = 1; i <data.courses.length; ++i) {\n    if (res[i-1] > res[i]) {\n        tests[\"Check priority\"] = false;\n    } else {\n        tests[\"Correct Priority\"] = true;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465828444439,
			"name": "Courses- Search - Check response priority (defense - dod)",
			"description": "Courses - Search -Check the priority of the response. The responses are supposed to be in this order\n1. Exact match in title\n2. Exact match in content\n3. Partial match in title\n4. Partial match in content",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "7d0d712f-9e99-1ae1-3e50-adc599ca809a",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Username is a required field\"] = validationErrorsMap.get(\"username\") === \"Required field\";\ntests[\"Password is a required field\"] = validationErrorsMap.get(\"password\") === \"Required field\";\ntests[\"Last Four SSN is a required field\"] = validationErrorsMap.get(\"lastFourSSN\") === \"Required field\";\ntests[\"Timezone ID is a required field\"] = validationErrorsMap.get(\"timezoneId\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076991783,
			"name": "Create Postman User for Input Validation",
			"description": "Create the postman user with invalid user information for validation testing",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "83702a1d-2a9f-d5e8-6569-83f75a0803be",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions?status=c&sessiondomain=CD",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All -Filter by Session Status and SessionDomain ",
			"description": "Sessions - All -Filter by Session Status and SessionDomain",
			"descriptionFormat": "html",
			"time": 1459347178806,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "887b6a3b-ece6-cc0d-7cc2-df7fe4e4ef74",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Invalid user message\"] = jsonData.message === \"Invalid user\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456589788349,
			"name": "Postman User Authentication Should Fail",
			"description": "Verify that the postman user cannot login since the user does not exist at this point.",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a",
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}"
		},
		{
			"id": "8978ec62-83ed-bede-dbaf-73b42bc89fc5",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=federal%20acquisition%20regulation&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)federal acquisition regulation($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)far($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)federal acquisition regulation($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)far($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"federal\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"acquisition\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"regulation\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"far\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"federal\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"acquisition\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"regulation\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"far\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_far\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909140565,
			"name": "Courses- Search - Check response synonym (Federal Acquisition Regulation)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "8f128907-f25e-fe16-7421-321562f9aac5",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=defense&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)defense($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)dod($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)defense($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)dod($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"defense\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"dod\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"defense\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"dod\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_dod\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909126124,
			"name": "Courses- Search - Check response synonym (defense)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "90b1be02-58aa-c952-05a0-6223be960373",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.duplicateUser.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888144260,
			"name": "Get Guest Token for Duplicate User",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "98b26b7e-ce26-15e6-858b-69c0153deb4e",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}delivery_method:Classroom - Day",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831783787,
			"name": "Courses- Search -Filter by Delivery Method",
			"description": "Courses - Search -Filter by DeliveryMethod",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220"
		},
		{
			"id": "a62e2880-94b8-4234-d342-e4925cdac08e",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.duplicate.user_id\");\ntests[\"Verify renewal token created\"] = data.renewalToken.token;\n\npostman.setGlobalVariable(\"authentication.duplicate.authenticated_token\", data.authToken.token);\npostman.setGlobalVariable(\"authentication.duplicate.renewal_token\", data.renewalToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888731059,
			"name": "Postman User Authentication Should Succeed Duplicate User",
			"description": "Verify that the postman user can login",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postmanDuplicate@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "a8691425-f43b-18e4-4d29-6477ca5c372b",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.id === postman.getGlobalVariable(\"authentication.user_id\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680401363,
			"name": "Get Postman User by ID",
			"description": "Get the postman user by the user id",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "a9ea12c8-f0af-4a5c-5dbf-9687b1cc5711",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=introduction%20to%20accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\n\nvar courses = JSON.parse(responseBody).courses;\n\nfor (var i=0; i<courses.length; i++){\n    if(courses[i].title.toLowerCase().indexOf(\"introduction\") > -1 || courses[i].title.toLowerCase().indexOf(\"to\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"introduction\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"to\") > -1){\n        tests[\"Course is relevant to accounting test \" + i] = (courses[i].title.toLowerCase().indexOf(\"accounting\") > -1 || courses[i].description.text.toLowerCase().indexOf(\"accounting\") > -1)\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465498919726,
			"name": "Courses - Search Connector Words",
			"description": "Search for a course by a description or course code and removing connector words",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "aa8f986b-eee6-b4c2-f915-f6c0cb062476",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=&filter={facet-countall}category:Human Resources",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831751703,
			"name": "Courses- Search -Filter by Category",
			"description": "A Course Search by Category",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "acc40025-5d6e-394e-0d38-0dd4ecbbde27",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=contracting%20officer%20representatives&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/)!== null ||  data.courses[i].title.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"contracting\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"officer\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"representatives\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cor\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cors\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"contracting\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"officer\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"representatives\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cor\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cros\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_cor1\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909154723,
			"name": "Courses- Search - Check response synonym (contracting officer representatives)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "ad035177-babb-74c3-b129-75bd75f340ce",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=dod&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)defense($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/dod($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)defense($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)dod($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"defense\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"dod\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"defense\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"dod\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\ntests[\"Number of exact matches is correct\"] = globals[\"num_exact_results_dod\"] == numExactMatches;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909137013,
			"name": "Courses- Search - Check response synonym (dod)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "ae264781-2f57-350e-ad0a-24e461932950",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/locations",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\ntests[\"Contains Washington\"] = responseBody.has(\"Washington\");\ntests[\"Contains DC\"] = responseBody.has(\"DC\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831865224,
			"name": "Locations",
			"description": "Get Locations",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "b2bda512-0ae8-4d1a-402c-b01ef28b6a2d",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463077009495,
			"name": "Create Postman User throws Duplicate User Exception",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "b3225308-0eb8-b9e8-55bc-71edd96c13bf",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831887742,
			"name": "Site - Search",
			"description": "Search the site by a keyword",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "b77a4521-eca8-b334-7973-d2b7b60b74b2",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=hr&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)human resources($|\\s|,)/)!== null || data.courses[i].title.toLowerCase().match(/(^|\\s)hr($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)human resources($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)hr($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"human\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"resources\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"hr\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"human\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"resources\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"hr\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\ntests[\"Number of exact matches is correct\"] = globals[\"num_exact_results_hr\"] == numExactMatches;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909107055,
			"name": "Courses- Search - Check response synonym (hr)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "babfb122-9bfc-1f03-5034-b6e0ea50c0af",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/reauthentication",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful reAuthentication\"] = responseCode.code === 200;\n\ntests[\"Verify body is empty\"] = responseBody === \"\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461243626817,
			"name": "Postman User ReAuthorize Token AuthToken Still Valid",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"authToken\" : {\n        \"token\" : \"{{authentication.authenticated_token}}\"\n    },\n    \"renewalToken\" : {\n        \"token\" : \"{{authentication.renewal_token}}\"\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "bb38cd6d-4657-3be6-b42e-103e20369fac",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464888807937,
			"name": "Update Postman User Duplicate Email",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"postmanDuplicate@atb.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"postmanDuplicate@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "bf8b8361-2e60-5165-a428-8f9456c1346e",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}category_subject:Accounting~Accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\nvar data = JSON.parse(responseBody);\ntests[\"Results Found\"] = data.numFound != 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831767286,
			"name": "Courses- Search -Filter by Category Subject",
			"description": "A Course Search by Category Subject",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"folder": null,
			"id": "dad02740-99b3-07b6-3e7d-09d588b7cb56",
			"name": "Ping",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "A ping test API",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/ping",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220"
		},
		{
			"id": "e5a8d332-aaaa-0b26-5d48-c8015017eae8",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD1234",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No course found for course courseId BAD1234\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831824857,
			"name": "Course Detail Error",
			"description": "No course found for Course Code",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "ee4ef2c0-100f-433b-09c5-23253a963a1f",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831837648,
			"name": "Course Sessions",
			"description": "Get Course Sessions",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "f121e769-6774-6b82-da52-58cfff02374a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?page=0",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455832339101,
			"name": "Courses - Invalid Args",
			"description": "Invalid args passed to course API",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "f1882148-3f63-57b2-6bec-ff881a20400d",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify user not found\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct message\"] = data.message === (\"User not found by id \" + postman.getGlobalVariable(\"authentication.user_id\"));\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680425091,
			"name": "Get Postman User by ID Should Not Be Found",
			"description": "Verify that the postman user has been deleted",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		},
		{
			"id": "f1e306f8-111c-03f3-291f-2668fc005290",
			"headers": "Authorization: {{syn_auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=cor&numRequested=1000",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check totalPages is 1\"] = data.totalPages === 1;\n\nvar numExactMatches = 0;\n\nfor (var i=0; i <data.courses.length; ++i) {\n    if (data.courses[i].title.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/)!== null ||  data.courses[i].title.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/)!== null) {\n            numExactMatches++;\n    } else if (data.courses[i].description.text.toLowerCase().match(/(^|\\s)contracting officer representatives($|\\s|,)/) !== null || data.courses[i].description.text.toLowerCase().match(/(^|\\s)cors?($|\\s|,)/) !== null) {\n        numExactMatches++;\n    } else if (data.courses[i].title.toLowerCase().indexOf(\"contracting\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"officer\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"representatives\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cor\")!== -1 || data.courses[i].title.toLowerCase().indexOf(\"cors\")!== -1) {\n    } else if (data.courses[i].description.text.toLowerCase().indexOf(\"contracting\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"officer\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"representatives\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cor\")!== null || data.courses[i].description.text.toLowerCase().indexOf(\"cros\")!== null) {\n    } else {\n        tests[\"Contained synonym\"] = false;\n    }\n}\n\npostman.setGlobalVariable(\"num_exact_results_cor2\", numExactMatches);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1465909158576,
			"name": "Courses- Search - Check response synonym (cor)",
			"description": "",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"folder": "a5fad4d3-5253-4c37-e048-23e7d4f6cf94"
		},
		{
			"id": "f3006c5b-b3f4-28a7-5344-6a67f92aa951",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/categories",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar data = JSON.parse(responseBody);\ntests[\"An array is returned\"] = data.length > 0;\ntests[\"First item has a category\"] = data[0].category.length > 0;\ntests[\"First item has a subject array\"] = data[0].courseSubject.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831913078,
			"name": "Categories",
			"description": "Get course categories with a list o subjects in each category",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": []
		},
		{
			"id": "f9c67a56-59ab-6b22-6d47-7bfb05eaa8a8",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Address1 is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.address1\") === \"Required field\";\ntests[\"City is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.city\") === \"Required field\";\ntests[\"State is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.state\") === \"Required field\";\ntests[\"Postal Code is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.postalCode\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076940955,
			"name": "Create Postman User for Input Validation of Address",
			"description": "Create the postman user with invalid user information in Address Object for validation testing",
			"collectionId": "f03fbab9-1396-a1d3-400d-401bff395220",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \n        }\n    }\n}",
			"folder": "17ee8b3c-425d-1844-177a-7919e5338f3a"
		}
	]
}