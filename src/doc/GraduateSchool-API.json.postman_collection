{
	"id": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
	"name": "GraduateSchool-API",
	"description": "",
	"order": [
		"dad3f3c9-f291-235f-6f8e-ccbf52c2d3b0",
		"07c9718f-e796-a5b1-d7c4-7bcd7b72590b",
		"8547e926-b6fe-5548-8748-e866e50baca9",
		"171d168d-44f2-d230-8397-0eb5f3fa3577",
		"8ffe6b0c-6ec5-9419-9737-2c607ada71e1",
		"bcf55ce9-d61a-34bb-0541-16704592d6e8",
		"0380b89b-b590-96a9-2491-85c148fdaf82",
		"3d7ee5b7-cf8c-b55a-c1c5-528a689b6b4f",
		"c64104a3-c695-134c-494a-bf1b93c3045d",
		"ff037c32-4fa4-32a3-69f3-0658e6f68372",
		"09f01569-ebda-f98f-9654-d4c013dba4a2",
		"a8137bde-1ba1-0742-31f6-bdb382a84860",
		"c45482c6-8b17-31dc-bacc-195f14367a2f",
		"12616bbe-44b2-4e20-64a6-b8d2f1ecae40",
		"a20ea5f4-336d-147e-504a-c16f8dc8d127",
		"ffffd00b-ad27-49fe-6ec7-17ddcd70ecb0",
		"4d9c1c24-04d2-85fa-eebf-f4ed4d84aa1a",
		"5bcda4c4-7d79-2d52-07c1-2766d3f6628a",
		"967a23c0-05e6-76aa-7aab-981ff911d527",
		"b719c352-8b9b-9456-675c-ba57f7d1d511",
		"1efc4cb7-0928-f44b-7cbe-d0d9358f56e7",
		"0f129307-1b27-7d35-523e-6d16fa140a9a",
		"487f0f5e-6256-c92e-20d1-7727e5c9d325",
		"5fc10c8b-8012-f72f-336d-2ad74088f639"
	],
	"folders": [
		{
			"id": "0c245096-a7cb-b165-058f-ae406107caf2",
			"name": "Authentication",
			"description": "",
			"order": [
				"2c64a535-86fc-15bb-9d7d-dfb068f3c7f4",
				"743e2a61-dba9-a446-f682-a50dbd67b9aa",
				"bfb7a1a4-8136-75ac-bb74-64374d347fea",
				"777b3378-0e6f-9bdb-de12-829c0420a9af",
				"2fc3ff28-a053-dbdc-cca3-bc86dde0ca1d",
				"77270fd6-72bc-b923-3e9a-351b44d35346",
				"afc31154-9a73-d42e-ea41-a84d9f88eabd",
				"d2b93f03-1f43-d220-1259-720d94a248fc",
				"7d328b65-a5d7-32bb-1bfa-6f616960a5e4",
				"a5a160ae-4c55-251f-8252-7572c6d61443",
				"e686d5bd-c4a1-bdfb-79f2-c640d10c51b2",
				"19d004b2-b796-e7be-ba25-59a762f86f3a",
				"769de6a9-733f-fe87-67b6-9a3a3d744a46",
				"eef9c7e8-976e-5c43-2073-7ccc7095405b",
				"66b0581f-7392-acfa-cf37-43386b12003a",
				"6d2c04fc-2a51-562d-60fa-1f2180dc8f18"
			],
			"owner": "329957",
			"collectionId": "eb625399-b084-ec03-4d86-9a2f3022c318"
		}
	],
	"timestamp": 1436731751085,
	"owner": "329957",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "0380b89b-b590-96a9-2491-85c148fdaf82",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=&filter=status:C",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response contains status facets\"] = responseBody.has(\"statusFacets\");\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for status facet of 'C'\"] = data.statusFacets.C >= 0\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831731667,
			"name": "Courses - Search - Filter by Status",
			"description": "Search for a course by a description or course code and filter by status",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"folder": null,
			"id": "07c9718f-e796-a5b1-d7c4-7bcd7b72590b",
			"name": "Environment Check",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "An API to find out which environment you are running",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/env",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554"
		},
		{
			"id": "09f01569-ebda-f98f-9654-d4c013dba4a2",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831799000,
			"name": "Courses - All",
			"description": "Get all courses",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "0f129307-1b27-7d35-523e-6d16fa140a9a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/55555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No session found for session id 55555\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680503443,
			"name": "Specific Course Session Error",
			"description": "See what a course session error looks like",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "12616bbe-44b2-4e20-64a6-b8d2f1ecae40",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD1234",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No course found for course courseId BAD1234\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831824857,
			"name": "Course Detail Error",
			"description": "No course found for Course Code",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "171d168d-44f2-d230-8397-0eb5f3fa3577",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455830778929,
			"name": "Courses - Search",
			"description": "Search for a course by a description or course code",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "19d004b2-b796-e7be-ba25-59a762f86f3a",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464718024309,
			"name": "Update Postman User Duplicate Email",
			"description": "",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"test@test.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"test@test.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}"
		},
		{
			"id": "1efc4cb7-0928-f44b-7cbe-d0d9358f56e7",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions/610076",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"610076\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680498475,
			"name": "Specific Course Session",
			"description": "Get Course Session",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "2c64a535-86fc-15bb-9d7d-dfb068f3c7f4",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680355115,
			"name": "Get Guest Token",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "2fc3ff28-a053-dbdc-cca3-bc86dde0ca1d",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Username is a required field\"] = validationErrorsMap.get(\"username\") === \"Required field\";\ntests[\"Password is a required field\"] = validationErrorsMap.get(\"password\") === \"Required field\";\ntests[\"Last Four SSN is a required field\"] = validationErrorsMap.get(\"lastFourSSN\") === \"Required field\";\ntests[\"Timezone ID is a required field\"] = validationErrorsMap.get(\"timezoneId\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076991783,
			"name": "Create Postman User for Input Validation",
			"description": "Create the postman user with invalid user information for validation testing",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "3d7ee5b7-cf8c-b55a-c1c5-528a689b6b4f",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&filter=city_state:Jacksonville, FL",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831742056,
			"name": "Courses - Search - Filter by Location",
			"description": "Search for a course by a description or course code and filter by location",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "487f0f5e-6256-c92e-20d1-7727e5c9d325",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All",
			"description": "",
			"descriptionFormat": "html",
			"time": 1458852618739,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "4d9c1c24-04d2-85fa-eebf-f4ed4d84aa1a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/locations",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\ntests[\"Contains Washington\"] = responseBody.has(\"Washington\");\ntests[\"Contains DC\"] = responseBody.has(\"DC\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831865224,
			"name": "Locations",
			"description": "Get Locations",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "5bcda4c4-7d79-2d52-07c1-2766d3f6628a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831887742,
			"name": "Site - Search",
			"description": "Search the site by a keyword",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "5fc10c8b-8012-f72f-336d-2ad74088f639",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions?status=c&sessiondomain=CD",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All -Filter by Session Status and SessionDomain ",
			"description": "Sessions - All -Filter by Session Status and SessionDomain",
			"descriptionFormat": "html",
			"time": 1459347178806,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "66b0581f-7392-acfa-cf37-43386b12003a",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify user not found\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct message\"] = data.message === (\"User not found by id \" + postman.getGlobalVariable(\"authentication.user_id\"));\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680425091,
			"name": "Get Postman User by ID Should Not Be Found",
			"description": "Verify that the postman user has been deleted",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "6d2c04fc-2a51-562d-60fa-1f2180dc8f18",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify unauthorized\"] = responseCode.code === 401;\n\npostman.clearGlobalVariable(\"authentication.user_id\");\npostman.clearGlobalVariable(\"authentication.guest_token\");\npostman.clearGlobalVariable(\"authentication.authenticated_token\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456591230081,
			"name": "Postman User Authentication Should Fail Again",
			"description": "Verify that the postman user can no longer login",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "743e2a61-dba9-a446-f682-a50dbd67b9aa",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Invalid user message\"] = jsonData.message === \"Invalid user\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456589788349,
			"name": "Postman User Authentication Should Fail",
			"description": "Verify that the postman user cannot login since the user does not exist at this point.",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2",
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}"
		},
		{
			"id": "769de6a9-733f-fe87-67b6-9a3a3d744a46",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/reauthentication",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful reAuthentication\"] = responseCode.code === 200;\n\ntests[\"Verify body is empty\"] = responseBody === \"\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461243626817,
			"name": "Postman User ReAuthorize Token AuthToken Still Valid",
			"description": "",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"authToken\" : {\n        \"token\" : \"{{authentication.authenticated_token}}\"\n    },\n    \"renewalToken\" : {\n        \"token\" : \"{{authentication.renewal_token}}\"\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "77270fd6-72bc-b923-3e9a-351b44d35346",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076980780,
			"name": "Create Postman User",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "777b3378-0e6f-9bdb-de12-829c0420a9af",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 5 validation errors\"] = data.validationErrors.length == 5;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"First Name is a required field\"] = validationErrorsMap.get(\"person.firstName\") === \"Required field\";\ntests[\"Last Name is a required field\"] = validationErrorsMap.get(\"person.lastName\") === \"Required field\";\ntests[\"Email Address is a required field\"] = validationErrorsMap.get(\"person.emailAddress\") === \"Required field\";\ntests[\"Primary Phone is a required field\"] = validationErrorsMap.get(\"person.primaryPhone\") === \"Required field\";\ntests[\"Date of Birth is a required field\"] = validationErrorsMap.get(\"person.dateOfBirth\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680373528,
			"name": "Create Postman User for Input Validation of Person",
			"description": "Create the postman user with invalid user information in Person Object for validation testing",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "7d328b65-a5d7-32bb-1bfa-6f616960a5e4",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.id === postman.getGlobalVariable(\"authentication.user_id\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680401363,
			"name": "Get Postman User by ID",
			"description": "Get the postman user by the user id",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "8547e926-b6fe-5548-8748-e866e50baca9",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/tokens",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680434436,
			"name": "Get Token",
			"description": "Get auth token",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "8ffe6b0c-6ec5-9419-9737-2c607ada71e1",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?page=0",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455832339101,
			"name": "Courses - Invalid Args",
			"description": "Invalid args passed to course API",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "967a23c0-05e6-76aa-7aab-981ff911d527",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=&filter=content:Washington,%20DC",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831901017,
			"name": "Site - Search - By location",
			"description": "Search the site by a keyword and filter by location",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "a20ea5f4-336d-147e-504a-c16f8dc8d127",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831837648,
			"name": "Course Sessions",
			"description": "Get Course Sessions",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "a5a160ae-4c55-251f-8252-7572c6d61443",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/registrations/users/{{authentication.user_id}}/sessions/555555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680410787,
			"name": "Get Registrations for User by Session",
			"description": "Verify that no registrations for the user",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "a8137bde-1ba1-0742-31f6-bdb382a84860",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}delivery_method:Classroom - Day",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831783787,
			"name": "Courses- Search -Filter by Delivery Method",
			"description": "Courses - Search -Filter by DeliveryMethod",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554"
		},
		{
			"id": "afc31154-9a73-d42e-ea41-a84d9f88eabd",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.user_id\");\ntests[\"Verify renewal token created\"] = data.renewalToken.token;\n\npostman.setGlobalVariable(\"authentication.authenticated_token\", data.authToken.token);\npostman.setGlobalVariable(\"authentication.renewal_token\", data.renewalToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461181834225,
			"name": "Postman User Authentication Should Succeed",
			"description": "Verify that the postman user can login",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "b719c352-8b9b-9456-675c-ba57f7d1d511",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/categories",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar data = JSON.parse(responseBody);\ntests[\"An array is returned\"] = data.length > 0;\ntests[\"First item has a category\"] = data[0].category.length > 0;\ntests[\"First item has a subject array\"] = data[0].courseSubject.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831913078,
			"name": "Categories",
			"description": "Get course categories with a list o subjects in each category",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "bcf55ce9-d61a-34bb-0541-16704592d6e8",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&page=2&numRequested=10",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 2\"] = data.currentPage === 2;\ntests[\"Num requested is 10\"] = data.numRequested === 10;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831595202,
			"name": "Courses - Search - Pagination",
			"description": "Search for a course by a description or course code with page and nuumber requested specified",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "bfb7a1a4-8136-75ac-bb74-64374d347fea",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Address1 is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.address1\") === \"Required field\";\ntests[\"City is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.city\") === \"Required field\";\ntests[\"State is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.state\") === \"Required field\";\ntests[\"Postal Code is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.postalCode\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463076940955,
			"name": "Create Postman User for Input Validation of Address",
			"description": "Create the postman user with invalid user information in Address Object for validation testing",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \n        }\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "c45482c6-8b17-31dc-bacc-195f14367a2f",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check id\"] = data.id === \"ADMB7006D001\";\ntests[\"Check code\"] = data.code === \"ADMB7006D\";\ntests[\"Objective exists\"] = data.objective.length > 0;\ntests[\"Outcomes exists\"] = data.outcomes.length > 0;\ntests[\"Description exists\"] = data.description.formatted.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831808191,
			"name": "Course Detail",
			"description": "Get course detail",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "c64104a3-c695-134c-494a-bf1b93c3045d",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=&filter={facet-countall}category:Human Resources",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831751703,
			"name": "Courses- Search -Filter by Category",
			"description": "A Course Search by Category",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "d2b93f03-1f43-d220-1259-720d94a248fc",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 409\"] = responseCode.code === 409;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463077009495,
			"name": "Create Postman User throws Duplicate User Exception",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"folder": null,
			"id": "dad3f3c9-f291-235f-6f8e-ccbf52c2d3b0",
			"name": "Ping",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "A ping test API",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/ping",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554"
		},
		{
			"id": "e686d5bd-c4a1-bdfb-79f2-c640d10c51b2",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464717971624,
			"name": "Update Postman User",
			"description": "",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "{\n    \"id\"    :   \"{{authentication.user_id}}\",\n    \"username\" : \"differentPostman@atb.com\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"accountNumber\" : \"0021\",\n    \"person\" : {\n        \"firstName\" : \"Posterman\",\n        \"lastName\" : \"Posterman\",\n        \"emailAddress\" : \"differentPostman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"04/04/1950\",\n        \"personNumber\" : \"0123\",\n        \"primaryAddress\" : {\n            \"address1\" : \"2000 Hamilton Ave\",\n            \"city\" : \"Parkville\",\n            \"state\" : \"MD\",\n            \"postalCode\" : \"21234\"\n        }\n    }\n}"
		},
		{
			"id": "eef9c7e8-976e-5c43-2073-7ccc7095405b",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/users/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461680419440,
			"name": "Delete Postman User",
			"description": "Delete the postman user",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": [],
			"rawModeData": "",
			"folder": "0c245096-a7cb-b165-058f-ae406107caf2"
		},
		{
			"id": "ff037c32-4fa4-32a3-69f3-0658e6f68372",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}category_subject:Accounting~Accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\nvar data = JSON.parse(responseBody);\ntests[\"Results Found\"] = data.numFound != 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831767286,
			"name": "Courses- Search -Filter by Category Subject",
			"description": "A Course Search by Category Subject",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		},
		{
			"id": "ffffd00b-ad27-49fe-6ec7-17ddcd70ecb0",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD12345/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No sessions found for course courseId BAD12345\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831846943,
			"name": "Course Sessions Error",
			"description": "See what a course session error looks like",
			"collectionId": "1a2f526a-6cc0-512c-06d3-b6ff5d728554",
			"responses": []
		}
	]
}