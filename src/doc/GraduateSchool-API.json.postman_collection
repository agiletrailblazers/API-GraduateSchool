{
	"id": "aa2b27b7-32a8-d797-b339-21751c461ac5",
	"name": "GraduateSchool-API",
	"description": "",
	"order": [
		"587c2be3-f039-3824-bb11-97c386810bcd",
		"0e60497c-7a82-5658-0e28-43600d7d66cd",
		"60302057-68b8-5f92-84d3-132b2f1899dc",
		"8aeb4e4a-5e17-479d-42da-7a8a06647030",
		"2c45bdac-7e8d-f48c-0111-c8e0170bd5c7",
		"a83f4a05-ba9d-48e7-18ca-cb5689bd3e73",
		"8c1a4b7d-48a8-363e-8e08-e7f1e92920e6",
		"20652f54-b949-d848-5c83-f21a69da8128",
		"46868032-9f44-8808-32de-1dbb4b97f0d1",
		"9d3a9d58-1753-5e54-4473-3813491d6fcf",
		"574c4154-dd1a-eb73-9a44-7de11da760a2",
		"8563e5cf-7a60-9cb2-7a07-aaf9a2444813",
		"c98756ae-b102-ac07-d634-a40751e9c8fc",
		"1897510b-cf0e-061b-4bb5-b46373001574",
		"4b886961-8de2-f2a7-9aae-34da8a02a768",
		"d644fc92-f4ec-323a-6502-e124604bbdf6",
		"712149e9-49c0-96d5-6711-8cc86de62ebf",
		"622ce6e2-ca3f-14cd-d275-dd53163b4ae4",
		"e27d971e-fb52-9a1f-0b1f-90cb6e0dc5e5",
		"a9761481-d7c4-32fc-cc7b-d0e318d974f5",
		"942aa179-af53-edce-2585-bedc3ca17d82",
		"04f6e6fc-cbd8-7697-c2f1-5876c635ef3a",
		"0277c7f7-fb95-fe24-46e1-1451cf010787",
		"50055a95-69d5-13fc-efba-26a475abbdcc"
	],
	"folders": [
		{
			"id": "5537ef65-2372-1983-917c-8c5ba1e832b3",
			"name": "Authentication",
			"description": "",
			"order": [
				"17906c5c-e66b-b08e-981c-ec0d7ef22bb3",
				"25d312f5-b51e-0e45-2408-935ff917903e",
				"69564710-816a-bbe3-5391-ddf9f1db5d92",
				"598c1696-0622-fa1e-9ca6-17f84637353e",
				"fb38c5fb-36cd-0659-ce17-ae04b2c9100c",
				"5327657f-f351-de94-bcbe-6a6d2fb98788",
				"2f6e0adf-7372-dc1a-d962-9515ef4ec18d",
				"ede75e4e-4c75-87e7-d187-cb012f51700a",
				"4e2872ab-112b-8d1f-ffe3-6119cf08a24a",
				"73439df0-f825-6d4a-1141-17b02cf9d219",
				"fc6ed42b-267a-e3bc-7422-df9b83c47f2d",
				"8969539c-ef00-cd3f-f3fb-28071f5749f2"
			],
			"owner": "108364",
			"collectionId": "10b1d29e-b87b-20cb-cbfb-50dff1f0ab5f"
		}
	],
	"timestamp": 1436731751085,
	"owner": "108364",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "0277c7f7-fb95-fe24-46e1-1451cf010787",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All",
			"description": "",
			"descriptionFormat": "html",
			"time": 1458852618739,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "04f6e6fc-cbd8-7697-c2f1-5876c635ef3a",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/session/55555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No session found for session id 55555\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455832956922,
			"name": "Specific Course Session Error",
			"description": "See what a course session error looks like",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"folder": null,
			"id": "0e60497c-7a82-5658-0e28-43600d7d66cd",
			"name": "Environment Check",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "An API to find out which environment you are running",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/env",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5"
		},
		{
			"id": "17906c5c-e66b-b08e-981c-ec0d7ef22bb3",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/token",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.guest_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456589784416,
			"name": "Get Guest Token",
			"description": "Get a guest token to be used for the authentication test collection",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "1897510b-cf0e-061b-4bb5-b46373001574",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD1234",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No course found for course courseId BAD1234\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831824857,
			"name": "Course Detail Error",
			"description": "No course found for Course Code",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "20652f54-b949-d848-5c83-f21a69da8128",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&filter=city_state:Jacksonville, FL",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831742056,
			"name": "Courses - Search - Filter by Location",
			"description": "Search for a course by a description or course code and filter by location",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "25d312f5-b51e-0e45-2408-935ff917903e",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Invalid user message\"] = jsonData.message === \"Invalid user\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456589788349,
			"name": "Postman User Authentication Should Fail",
			"description": "Verify that the postman user cannot login since the user does not exist at this point.",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3",
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}"
		},
		{
			"id": "2c45bdac-7e8d-f48c-0111-c8e0170bd5c7",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?page=0",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455832339101,
			"name": "Courses - Invalid Args",
			"description": "Invalid args passed to course API",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "2f6e0adf-7372-dc1a-d962-9515ef4ec18d",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.user.id === postman.getGlobalVariable(\"authentication.user_id\");\n\npostman.setGlobalVariable(\"authentication.authenticated_token\", data.authToken.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456590360665,
			"name": "Postman User Authentication Should Succeed",
			"description": "Verify that the postman user can login",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "46868032-9f44-8808-32de-1dbb4b97f0d1",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=&filter={facet-countall}category:Human Resources",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831751703,
			"name": "Courses- Search -Filter by Category",
			"description": "A Course Search by Category",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "4b886961-8de2-f2a7-9aae-34da8a02a768",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831837648,
			"name": "Course Sessions",
			"description": "Get Course Sessions",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "4e2872ab-112b-8d1f-ffe3-6119cf08a24a",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/registration/user/{{authentication.user_id}}/session/555555",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1457553875001,
			"name": "Get Registrations for User by Session",
			"description": "Verify that no registrations for the user",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "50055a95-69d5-13fc-efba-26a475abbdcc",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/sessions?status=c&sessiondomain=CD",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"data": null,
			"dataMode": "params",
			"name": "Sessions - All -Filter by Session Status and SessionDomain ",
			"description": "Sessions - All -Filter by Session Status and SessionDomain",
			"descriptionFormat": "html",
			"time": 1459347178806,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"Body matches string\"] = responseBody.has(\"classNumber\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "5327657f-f351-de94-bcbe-6a6d2fb98788",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"authentication.user_id\", data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458752592977,
			"name": "Create Postman User",
			"description": "Create the postman user for the authentication tests",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"19500404\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "574c4154-dd1a-eb73-9a44-7de11da760a2",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831799000,
			"name": "Courses - All",
			"description": "Get all courses",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"folder": null,
			"id": "587c2be3-f039-3824-bb11-97c386810bcd",
			"name": "Ping",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "A ping test API",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "http://{{url}}:{{port}}/api/ping",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5"
		},
		{
			"id": "598c1696-0622-fa1e-9ca6-17f84637353e",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 5 validation errors\"] = data.validationErrors.length == 5;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"First Name is a required field\"] = validationErrorsMap.get(\"person.firstName\") === \"Required field\";\ntests[\"Last Name is a required field\"] = validationErrorsMap.get(\"person.lastName\") === \"Required field\";\ntests[\"Email Address is a required field\"] = validationErrorsMap.get(\"person.emailAddress\") === \"Required field\";\ntests[\"Primary Phone is a required field\"] = validationErrorsMap.get(\"person.primaryPhone\") === \"Required field\";\ntests[\"Date of Birth is a required field\"] = validationErrorsMap.get(\"person.dateOfBirth\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458759556831,
			"name": "Create Postman User for Input Validation of Person",
			"description": "Create the postman user with invalid user information in Person Object for validation testing",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "60302057-68b8-5f92-84d3-132b2f1899dc",
			"headers": "",
			"url": "http://{{url}}:{{port}}/api/token",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\npostman.setGlobalVariable(\"auth_token\", data.token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831007307,
			"name": "Get Token",
			"description": "Get auth token",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "622ce6e2-ca3f-14cd-d275-dd53163b4ae4",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831887742,
			"name": "Site - Search",
			"description": "Search the site by a keyword",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "69564710-816a-bbe3-5391-ddf9f1db5d92",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Address1 is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.address1\") === \"Required field\";\ntests[\"City is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.city\") === \"Required field\";\ntests[\"State is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.state\") === \"Required field\";\ntests[\"Postal Code is a required field\"] = validationErrorsMap.get(\"person.primaryAddress.postalCode\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458759819772,
			"name": "Create Postman User for Input Validation of Address",
			"description": "Create the postman user with invalid user information in Address Object for validation testing",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n    \"username\" : \"postman@atb.com\",\n    \"password\" : \"test1234\",\n    \"lastFourSSN\" : \"4444\",\n    \"timezoneId\" : \"tzone000000000000012\",\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"19500404\",\n        \"primaryAddress\" : {\n            \n        }\n    }\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "712149e9-49c0-96d5-6711-8cc86de62ebf",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/locations",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\ntests[\"Contains Washington\"] = responseBody.has(\"Washington\");\ntests[\"Contains DC\"] = responseBody.has(\"DC\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831865224,
			"name": "Locations",
			"description": "Get Locations",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "73439df0-f825-6d4a-1141-17b02cf9d219",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456592598557,
			"name": "Delete Postman User",
			"description": "Delete the postman user",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "8563e5cf-7a60-9cb2-7a07-aaf9a2444813",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}delivery_method:Classroom - Day",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831783787,
			"name": "Courses- Search -Filter by Delivery Method",
			"description": "Courses - Search -Filter by DeliveryMethod",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5"
		},
		{
			"id": "8969539c-ef00-cd3f-f3fb-28071f5749f2",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/authentication",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Verify unauthorized\"] = responseCode.code === 401;\n\npostman.clearGlobalVariable(\"authentication.user_id\");\npostman.clearGlobalVariable(\"authentication.guest_token\");\npostman.clearGlobalVariable(\"authentication.authenticated_token\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456591230081,
			"name": "Postman User Authentication Should Fail Again",
			"description": "Verify that the postman user can no longer login",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n\"username\" : \"postman@atb.com\",\n\"password\" : \"test1234\"\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "8aeb4e4a-5e17-479d-42da-7a8a06647030",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455830778929,
			"name": "Courses - Search",
			"description": "Search for a course by a description or course code",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "8c1a4b7d-48a8-363e-8e08-e7f1e92920e6",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=&filter=status:C",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response contains status facets\"] = responseBody.has(\"statusFacets\");\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for status facet of 'C'\"] = data.statusFacets.C >= 0\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831731667,
			"name": "Courses - Search - Filter by Status",
			"description": "Search for a course by a description or course code and filter by status",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "942aa179-af53-edce-2585-bedc3ca17d82",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/session/610076",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body matches string\"] = responseBody.has(\"610076\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831923721,
			"name": "Specific Course Session",
			"description": "Get Course Session",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "9d3a9d58-1753-5e54-4473-3813491d6fcf",
			"headers": "Authorization: {{auth_token}}\n",
			"url": " http://{{url}}:{{port}}/api/courses?search=government&filter={facet-countall}category_subject:Accounting~Accounting",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"courses\");\nvar data = JSON.parse(responseBody);\ntests[\"Results Found\"] = data.numFound != 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831767286,
			"name": "Courses- Search -Filter by Category Subject",
			"description": "A Course Search by Category Subject",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "a83f4a05-ba9d-48e7-18ca-cb5689bd3e73",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses?search=government&page=2&numRequested=10",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 2\"] = data.currentPage === 2;\ntests[\"Num requested is 10\"] = data.numRequested === 10;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831595202,
			"name": "Courses - Search - Pagination",
			"description": "Search for a course by a description or course code with page and nuumber requested specified",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "a9761481-d7c4-32fc-cc7b-d0e318d974f5",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/categories",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar data = JSON.parse(responseBody);\ntests[\"An array is returned\"] = data.length > 0;\ntests[\"First item has a category\"] = data[0].category.length > 0;\ntests[\"First item has a subject array\"] = data[0].courseSubject.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831913078,
			"name": "Categories",
			"description": "Get course categories with a list o subjects in each category",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "c98756ae-b102-ac07-d634-a40751e9c8fc",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/ADMB7006D001",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check id\"] = data.id === \"ADMB7006D001\";\ntests[\"Check code\"] = data.code === \"ADMB7006D\";\ntests[\"Objective exists\"] = data.objective.length > 0;\ntests[\"Outcomes exists\"] = data.outcomes.length > 0;\ntests[\"Description exists\"] = data.description.formatted.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831808191,
			"name": "Course Detail",
			"description": "Get course detail",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "d644fc92-f4ec-323a-6502-e124604bbdf6",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/courses/BAD12345/sessions",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\ntests[\"Check for valid error message\"] = data.message === \"No sessions found for course courseId BAD12345\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831846943,
			"name": "Course Sessions Error",
			"description": "See what a course session error looks like",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "e27d971e-fb52-9a1f-0b1f-90cb6e0dc5e5",
			"headers": "Authorization: {{auth_token}}\n",
			"url": "http://{{url}}:{{port}}/api/site?search=&filter=content:Washington,%20DC",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\ntests[\"Current page is 1\"] = data.currentPage === 1;\ntests[\"Pages returned is more than zero\"] = data.pages.length > 0;\ntests[\"First page has a title\"] = data.pages[0].title.length > 0;\ntests[\"First page has content\"] = data.pages[0].content.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455831901017,
			"name": "Site - Search - By location",
			"description": "Search the site by a keyword and filter by location",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": []
		},
		{
			"id": "ede75e4e-4c75-87e7-d187-cb012f51700a",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify successful authentication\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct user\"] = data.id === postman.getGlobalVariable(\"authentication.user_id\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456590490031,
			"name": "Get Postman User by ID",
			"description": "Get the postman user by the user id",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "fb38c5fb-36cd-0659-ce17-ae04b2c9100c",
			"headers": "Authorization: {{authentication.guest_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Should have exactly 4 validation errors\"] = data.validationErrors.length == 4;\nvar validationErrorsMap = new Map();\nfor (i=0; i<data.validationErrors.length; i++){\n    validationErrorsMap.set(data.validationErrors[i].fieldName, data.validationErrors[i].errorMessage);\n}\n\ntests[\"Username is a required field\"] = validationErrorsMap.get(\"username\") === \"Required field\";\ntests[\"Password is a required field\"] = validationErrorsMap.get(\"password\") === \"Required field\";\ntests[\"Last Four SSN is a required field\"] = validationErrorsMap.get(\"lastFourSSN\") === \"Required field\";\ntests[\"Timezone ID is a required field\"] = validationErrorsMap.get(\"timezoneId\") === \"Required field\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458759212459,
			"name": "Create Postman User for Input Validation",
			"description": "Create the postman user with invalid user information for validation testing",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"rawModeData": "{\n    \"person\" : {\n        \"firstName\" : \"Postman\",\n        \"lastName\" : \"Postman\",\n        \"emailAddress\" : \"postman@atb.com\",\n        \"primaryPhone\" : \"5555555555\",\n        \"dateOfBirth\" : \"19500404\",\n        \"primaryAddress\" : {\n            \"address1\" : \"42 Woodland Drive\",\n            \"city\" : \"East Windsor\",\n            \"state\" : \"NJ\",\n            \"postalCode\" : \"08520\"\n        }\n    }\n}",
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		},
		{
			"id": "fc6ed42b-267a-e3bc-7422-df9b83c47f2d",
			"headers": "Authorization: {{authentication.authenticated_token}}\nContent-Type: application/json\n",
			"url": "http://{{url}}:{{port}}/api/user/{{authentication.user_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Verify user not found\"] = responseCode.code === 404;\n\nvar data = JSON.parse(responseBody);\n\ntests[\"Verify correct message\"] = data.message === (\"User not found by id \" + postman.getGlobalVariable(\"authentication.user_id\"));\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456591992212,
			"name": "Get Postman User by ID Should Not Be Found",
			"description": "Verify that the postman user has been deleted",
			"collectionId": "aa2b27b7-32a8-d797-b339-21751c461ac5",
			"responses": [],
			"folder": "5537ef65-2372-1983-917c-8c5ba1e832b3"
		}
	]
}