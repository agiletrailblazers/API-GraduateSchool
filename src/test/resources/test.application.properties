property.name=test

search.solr.endpoint=fakeSolr
search.solr.credentials=x:y

course.search.solr.query=/solr/courses/select?q=(course_name:("{search}"))^100 OR (course_name:(*{partial_search}*))^9 OR (course_id:(*{partial_search}*))^9 OR (course_code:(*{partial_search}*))^6 OR (course_description:(*{partial_search}*))^0.00001 OR (course_abstract:(*{partial_search}*))^0.00001 OR (course_prerequisites:(*{partial_search}*))^0.00001&fq=course_description:[* TO *]&start={start}&rows={numRequested}&wt=json&indent=true{filter}&group=true&group.field=course_id&group.facet=true&group.ngroups=true&group.format=simple&facet=true&facet.field={facet-exclude}city_state&facet.field=status&facet.field={facet-exclude}category_subject&sort={sort}&f.category_subject.facet.sort=index&facet.field={facet-exclude}delivery_method&f.delivery_method.facet.sort=index


course.search.solr.blacklist.connectors=something
course.search.solr.blacklist.terms=something

course.search.page.size=10
course.search.facet.location.exclude=Exclude,PA
course.search.sort.score=score desc
course.search.sort.course_id=course_id asc

site.search.solr.query=/solr/nutch-core/select?q=(title:(*{search}*)) AND (content:(*{search}*))&start={start}&rows={numRequested}&wt=json
site.search.title.exclude=Graduate School USA |

datasource.driverClassName=
datasource.url=
datasource.username=
datasource.password=

sql.course.single.query=
sql.course.sessions.query=
sql.sessions.query=
sql.course.session.id.query =
sql.sessions.sessiondomain.query =
sql.course.competency.query=
sql.course.session.query=
sql.course.session.single.query=test-sql-course-session-single-query
sql.location.city.state.query=
sql.course.all.query=
sql.category.subject.query=
sql.user.single.query=
sql.user.login.query=login query
sql.user.username.query=user by username query
sql.user.personInsert.procedure = test1
sql.user.profileInsert.procedure = test2
sql.user.listEntryInsert.procedure = test3
sql.user.deleteUser.procedure =
sql.user.changePassword.procedure =testResetPasswordProcedure
sql.user.password.query=testPasswordQuery
sql.user.updateUser.procedure = testUpdateProcedure

sql.user.passwordChangeRequired.query = testQuery

sql.user.registrations=test

sql.user.personId.sequence = test1
sql.user.profileId.sequence = test2
sql.user.listEntry.sequence = test

sql.registration.offeringActionInsert.procedure =
sql.registration.insertRegistration.procedure =
sql.registration.insertOrder.procedure =
sql.registration.insertOrderItem.procedure =
sql.registration.insertCharge.procedure =
sql.registration.insertPayment.procedure =
sql.registration.orderComplete.procedure =

sql.registration.offeringActionId.sequence = testOfferActionId
sql.registration.registrationId.sequence = testRegistrationId
sql.registration.orderId.sequence = testOrderId
sql.registration.orderItemId.sequence = testOrderItemId
sql.registration.chargeId.sequence = testChargeId
sql.registration.paymentId.sequence = testPaymentId

sql.registration.getOrderNo.query =

sql.registration.getExisting.query = select DISTINCT \
                                      REG.ID as reg_id, \
                                      ORD.ORDER_NO as order_no, \
                                      REG.STUDENT_ID as student_id, \
                                      COALESCE(OS.CLASS_NO,OSP.PART_NO,PC.PART_NO) session_id \
                                     from TPT_REGISTRATION REG, \
                                      TPT_OE_ORDER_ITEMS OI, \
                                      TPT_OE_ORDER ORD, \
                                      LET_EXT_OFFERING_SESSION OS, \
                                      LET_EXT_OFFERING_SELFPACED OSP, \
                                      TPT_EXT_PRODUCT_CATALOG PC \
                                     where REG.ID=OI.REG_ID \
                                      and OI.ORDER_ID=ORD.ID \
                                      and REG.CLASS_ID = COALESCE(OS.ID,OSP.ID,PC.ID) \
                                      and REG.STUDENT_ID = ? \
                                      and (OS.CLASS_NO = ? OR PC.PART_NO = ? OR OSP.PART_NO = ?)

sql.user.timezones.query=

course.interval.default=Variable

log.level.api=debug

auth.token.expire.minutes=5
auth.token.password=blahblahblah
auth.token.filter.uri.no.token.required=/api/tokens,/api/env,/api/ping
auth.token.filter.uri.guest.token.required=/api/site,/api/locations,/api/courses,/api/courses/\\w+$,/api/courses/\\w+/sessions,/api/courses/sessions/\\w+$,/api/courses/categories,/api/users,/api/authentication
auth.token.header=Authorization
auth.user.attribute=X-Auth-User
auth.token.renewal.expire.minutes=1440
auth.token.renewal.uri=/api/reauthorization

# CyberSource client properties
cybersource.merchantID=fakemerchantid
cybersource.keyFilename=fakemerchantid.p12
cybersource.targetAPIVersion=1.123
cybersource.serverURL=fakeserverurl
cybersource.useHttpClient=true
cybersource.timeout=5000
cybersource.sendToProduction=false
cybersource.enableLog=false
cybersource.logMaximumSize=10
cybersource.declinedReasonCodes=202,203,204,205,208,209,210,211,230,231,232,233


email.host=fake.host.com
email.port=123
email.username=testemail@test.com
email.password=test
email.transport.protocol=smtp
email.smtp.auth=true
email.smtp.starttls.enable=true
email.smtp.from=testemail@test.com
email.debug=false
email.user.accountPage=accountPage
email.user.privacyPolicyPage=privacyPage
email.user.loginPage=loginPage
email.subject.passwordReset=Account Password Changed
email.subject.paymentReceipt=Graduate School Payment Receipt
email.subject.newUser=- Welcome to the Graduate School!
